This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-03-12T03:05:07.197Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
app/api/process/route.ts
app/globals.css
app/layout.tsx
app/page.tsx
components.json
components/document/document-preview.tsx
components/document/document-upload.tsx
components/layout/footer.tsx
components/layout/header.tsx
components/results/results-display.tsx
components/schema/field-editor.tsx
components/schema/schema-builder-header.tsx
components/schema/schema-builder.tsx
components/schema/schema-field-item.tsx
components/theme-provider.tsx
components/theme-toggle.tsx
components/ui/badge.tsx
components/ui/button.tsx
components/ui/card.tsx
components/ui/collapsible.tsx
components/ui/dialog.tsx
components/ui/input.tsx
components/ui/label.tsx
components/ui/scroll-area.tsx
components/ui/select.tsx
components/ui/separator.tsx
components/ui/sonner.tsx
components/ui/switch.tsx
components/ui/textarea.tsx
components/ui/toggle-group.tsx
components/ui/toggle.tsx
components/ui/tooltip.tsx
eslint.config.mjs
hooks/use-hover.ts
lib/utils.ts
next.config.ts
package.json
postcss.config.mjs
public/file.svg
public/globe.svg
public/next.svg
public/vercel.svg
public/window.svg
README.md
styles/layout-utils.css
tsconfig.json
types/index.ts

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: app/api/process/route.ts
================
// app/api/process/route.ts
import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData();
    
    const response = await fetch('http://10.1.40.19:81/process/', {
      method: 'POST',
      body: formData,
    });

    const data = await response.json();
    console.log(data);
    if (!response.ok) {
      return NextResponse.json(
        { error: data.detail || 'Error processing document' }, 
        { status: response.status }
      );
    }
    
    return NextResponse.json(data);
  } catch (error) {
    console.error('Error in API route:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Unknown error occurred' }, 
      { status: 500 }
    );
  }
}

================
File: app/globals.css
================
@import "tailwindcss";

@plugin "tailwindcss-animate";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --destructive-foreground: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --radius: 0.625rem;
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.145 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.145 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.985 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.396 0.141 25.723);
  --destructive-foreground: oklch(0.637 0.237 25.331);
  --border: oklch(0.269 0 0);
  --input: oklch(0.269 0 0);
  --ring: oklch(0.439 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(0.269 0 0);
  --sidebar-ring: oklch(0.439 0 0);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: app/layout.tsx
================
import type {Metadata} from "next";
import {Geist, Geist_Mono} from "next/font/google";
import "./globals.css";
import "../styles/layout-utils.css";

import {ThemeProvider} from "@/components/theme-provider";
import {Header} from "@/components/layout/header";
import {Footer} from "@/components/layout/footer";
import {Toaster} from "@/components/ui/sonner";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "OCR Schema Builder",
  description: "Create and manage document schemas for OCR processing",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} min-h-screen antialiased`}
      >
        <ThemeProvider
          attribute="class"
          defaultTheme="dark"
          enableSystem
          disableTransitionOnChange
        >
          <div className="flex min-h-screen flex-col">
            <Header />
            <main className="flex-1 flex flex-col">{children}</main>
            <Footer />
          </div>
          <Toaster position="bottom-right" />
        </ThemeProvider>
      </body>
    </html>
  );
}

================
File: app/page.tsx
================
'use client';

import {useState} from 'react';
import {SchemaField, ProcessResponse} from '@/types';
import {DocumentUpload} from '@/components/document/document-upload';
import {DocumentPreview} from '@/components/document/document-preview';
import {SchemaBuilder} from '@/components/schema/schema-builder';
import {ResultsDisplay} from '@/components/results/results-display';
import {Sparkles} from 'lucide-react';
import confetti from 'canvas-confetti';
import {toast} from "sonner";
import {Card} from '@/components/ui/card';

export default function Home() {
  const [file, setFile] = useState<File | null>(null);
  const [filePreview, setFilePreview] = useState<string | null>(null);
  const [schemaFields, setSchemaFields] = useState<SchemaField[]>([
    {name: 'invoice_number', type: 'string', description: 'The invoice number (e.g., INV-12345)', required: true},
    {name: 'date', type: 'string', description: 'The invoice date', format: 'date', required: true},
    {name: 'vendor_name', type: 'string', description: 'The name of the company or person who issued the invoice', required: true},
    {name: 'total_amount', type: 'number', description: 'The total payment amount', required: true},
    {name: 'tax_amount', type: 'number', description: 'The tax amount', required: false}
  ]);
  const [loading, setLoading] = useState<boolean>(false);
  const [results, setResults] = useState<ProcessResponse | null>(null);
  const [selectedBox, setSelectedBox] = useState<number | null>(null);

  // Handle file selection
  const handleFileChange = (selectedFile: File | null) => {
    if (selectedFile) {
      setFile(selectedFile);
      const reader = new FileReader();
      reader.onload = (e) => {
        setFilePreview(e.target?.result as string);
      };
      reader.readAsDataURL(selectedFile);

      // Reset results when a new file is selected
      setResults(null);
      setSelectedBox(null);
    } else {
      setFile(null);
      setFilePreview(null);
    }
  };

  // Generate a simplified schema object for the API
  const generateSchemaObject = (): Record<string, string> => {
    return schemaFields.reduce((acc, field) => {
      acc[field.name] = field.type;
      return acc;
    }, {} as Record<string, string>);
  };

  // Handle form submission
  const handleSubmit = async () => {
    if (!file) {
      toast.error("Please select a file to upload");
      return;
    }

    if (schemaFields.length === 0) {
      toast.error("Please add at least one field to the schema");
      return;
    }

    setLoading(true);
    setResults(null);

    try {
      const formData = new FormData();
      formData.append('file', file);
      formData.append('schema', JSON.stringify(generateSchemaObject()));

      // Use our Next.js API route instead of directly calling the external API
      const response = await fetch('/api/process', {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Error processing document');
      }

      const data = await response.json() as ProcessResponse;
      setResults(data);

      toast.success("Document processed successfully");

      confetti({
        particleCount: 100,
        spread: 70,
        origin: {y: 0.6}
      });
    } catch (error) {
      toast.error(error instanceof Error ? error.message : 'Unknown error occurred');
    } finally {
      setLoading(false);
    }
  };

  const handleBoxClick = (index: number) => {
    setSelectedBox(index);

    // Create confetti effect
    const box = document.getElementById(`box-${index}`);
    if (box) {
      const rect = box.getBoundingClientRect();
      const x = (rect.left + rect.width / 2) / window.innerWidth;
      const y = (rect.top + rect.height / 2) / window.innerHeight;

      confetti({
        particleCount: 50,
        spread: 40,
        origin: {x, y},
        colors: ['#26c6da', '#5c6bc0', '#ec407a'],
      });
    }
  };

  return (
    <div className="container-wrapper">
      <div className="container py-4">
        <div className="content-section">
          {/* Increased gap and added more explicit sizing */}
          <div className="grid grid-cols-1 lg:grid-cols-7 gap-6 h-full"> {/* Increased gap from 4 to 6 */}
            {/* Schema Builder - Left Column */}
            <div className="lg:col-span-2 flex flex-col gap-6"> {/* Changed space-y-4 to gap-6 */}
              <DocumentUpload
                onFileChange={handleFileChange}
                isLoading={loading}
              />

              <SchemaBuilder
                schemaFields={schemaFields}
                setSchemaFields={setSchemaFields}
                onSubmit={handleSubmit}
                isLoading={loading}
                hasFile={!!file}
              />
            </div>

            {/* Document Preview - Center Column */}
            <div className="lg:col-span-3">
              <DocumentPreview
                filePreview={filePreview}
                ocrResults={results?.ocr_results || null}
                isLoading={loading}
                onSelectBox={handleBoxClick}
                selectedBox={selectedBox}
              />
            </div>

            {/* Results Display - Right Column */}
            <div className="lg:col-span-2">
              {results ? (
                <ResultsDisplay results={results} />
              ) : (
                <Card className="h-full flex flex-col items-center justify-center text-center p-4 bg-muted/30 border-dashed">
                  <div className="py-8 space-y-3">
                    <div className="rounded-full bg-primary/10 p-3 w-12 h-12 flex items-center justify-center mx-auto">
                      <Sparkles className="h-6 w-6 text-primary/80" />
                    </div>
                    <h3 className="text-lg font-medium">Extraction Results</h3>
                    <p className="text-sm text-muted-foreground max-w-[15rem] mx-auto">
                      Upload a document and process it to see the extracted data here
                    </p>
                  </div>
                </Card>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: components/document/document-preview.tsx
================
import {useRef, useState, useEffect} from 'react';
import {Card, CardContent, CardHeader, CardTitle} from "@/components/ui/card";
import {OCRResults, TextLine} from '@/types';
import {Loader, Image as ImageIcon} from "lucide-react";

interface DocumentPreviewProps {
    filePreview: string | null;
    ocrResults: OCRResults | null;
    isLoading: boolean;
    onSelectBox: (index: number) => void;
    selectedBox: number | null;
}
function BoundingBox({
    id,
    text,
    top,
    left,
    width,
    height,
    isSelected,
    onClick,
}: {
    id: string;
    text: string;
    top: number;
    left: number;
    width: number;
    height: number;
    isSelected: boolean;
    onClick: () => void;
}) {
    const [hovered, setHovered] = useState(false);

    return (
        <div
            id={id}
            onMouseEnter={() => setHovered(true)}
            onMouseLeave={() => setHovered(false)}
            onClick={(e) => {
                e.stopPropagation();
                onClick();
            }}
            style={{
                position: 'absolute',
                left: `${left}px`,
                top: `${top}px`,
                width: `${width}px`,
                height: `${height}px`,
                border: isSelected
                    ? '2px solid #1098ad'
                    : hovered
                        ? '2px dashed #1098ad'
                        : '1px solid rgba(16, 152, 173, 0.5)',
                backgroundColor: isSelected
                    ? 'rgba(16, 152, 173, 0.2)'
                    : hovered
                        ? 'rgba(16, 152, 173, 0.1)'
                        : 'transparent',
                cursor: 'pointer',
                borderRadius: '2px',
                zIndex: isSelected ? 100 : 10,
                transition: 'all 0.2s ease',
            }}
        >
            {(hovered || isSelected) && (
                <p
                    className="absolute -top-6 left-0 z-50 px-2 py-1 text-xs bg-primary text-primary-foreground rounded-sm max-w-[200px] overflow-hidden text-ellipsis whitespace-nowrap"
                    onClick={(e) => e.stopPropagation()}
                >
                    {text}
                </p>
            )}
        </div>
    );
}
export function DocumentPreview({
    filePreview,
    ocrResults,
    isLoading,
    onSelectBox,
    selectedBox
}: DocumentPreviewProps) {
    const imageRef = useRef<HTMLImageElement>(null);
    const containerRef = useRef<HTMLDivElement>(null);
    const [boxPositions, setBoxPositions] = useState<{
        top: number;
        left: number;
        width: number;
        height: number;
    }[]>([]);

    // Advanced box position calculation
    const calculateBoxPosition = (
        bbox: [number, number, number, number]
    ): {top: number; left: number; width: number; height: number} => {
        if (!imageRef.current) return {top: 0, left: 0, width: 0, height: 0};

        const imageRect = imageRef.current.getBoundingClientRect();
        const containerRect = containerRef.current?.getBoundingClientRect();

        // Precise scaling calculation
        const scaleX = imageRect.width / imageRef.current.naturalWidth;
        const scaleY = imageRect.height / imageRef.current.naturalHeight;

        // Center offset calculation
        const offsetX = containerRect ?
            (containerRect.width - imageRect.width) / 2 : 0;
        const offsetY = containerRect ?
            (containerRect.height - imageRect.height) / 2 : 0;

        // Calculate box position with more precise scaling
        const calculatedBox = {
            left: bbox[0] * scaleX + imageRect.left - (containerRect?.left || 0),
            top: bbox[1] * scaleY + imageRect.top - (containerRect?.top || 0),
            width: (bbox[2] - bbox[0]) * scaleX,
            height: (bbox[3] - bbox[1]) * scaleY
        };

        return calculatedBox;
    };

    // Recalculate bounding box positions
    const updateBoxPositions = () => {
        if (!imageRef.current || !ocrResults) return;

        const newBoxPositions = ocrResults.text_lines.map(line =>
            calculateBoxPosition(line.bbox)
        );

        setBoxPositions(newBoxPositions);
    };

    // Add resize and load event listeners
    useEffect(() => {
        // Delay calculation to ensure image is fully rendered
        const timeoutId = setTimeout(updateBoxPositions, 100);

        const handleResize = () => {
            updateBoxPositions();
        };

        // Add multiple event listeners for thorough coverage
        window.addEventListener('resize', handleResize);
        imageRef.current?.addEventListener('load', updateBoxPositions);

        return () => {
            clearTimeout(timeoutId);
            window.removeEventListener('resize', handleResize);
            imageRef.current?.removeEventListener('load', updateBoxPositions);
        };
    }, [ocrResults, filePreview]);

    return (
        <Card className="w-full h-full flex flex-col">
            <CardHeader className="px-3 py-2 flex flex-row items-center border-b">
                <CardTitle className="text-sm font-medium">Document Preview</CardTitle>
            </CardHeader>
            <CardContent
                className="p-3 flex-1 w-full relative"
                onClick={() => {
                    // Deselect box when clicking outside of boxes
                    onSelectBox(-1);
                }}
            >
                {filePreview ? (
                    <div
                        className="relative w-full h-full border border-border rounded-md overflow-hidden flex items-center justify-center"
                        ref={containerRef}
                        style={{height: 'calc(100vh - 12rem)'}}
                    >
                        <img
                            src={filePreview}
                            alt="Document preview"
                            className="max-w-full max-h-full object-contain"
                            ref={imageRef}
                        />

                        {ocrResults && boxPositions.map((box, index) => (
                            <BoundingBox
                                key={index}
                                id={`box-${index}`}
                                text={ocrResults.text_lines[index].text}
                                top={box.top}
                                left={box.left}
                                width={box.width}
                                height={box.height}
                                isSelected={selectedBox === index}
                                onClick={() => onSelectBox(index)}
                            />
                        ))}

                        {isLoading && (
                            <div className="absolute inset-0 flex items-center justify-center bg-background/70">
                                <Loader size={32} className="animate-spin text-primary" />
                            </div>
                        )}
                    </div>
                ) : (
                    <div
                        className="flex flex-col items-center justify-center py-12 text-muted-foreground bg-muted/30 rounded-md w-full"
                        style={{height: 'calc(100vh - 12rem)'}}
                    >
                        <ImageIcon size={48} className="mb-3 opacity-30" />
                        <p className="text-sm">Upload a document to see the preview</p>
                    </div>
                )}
            </CardContent>
        </Card>
    );
}

================
File: components/document/document-upload.tsx
================
import {useState, useCallback} from 'react';
import {Card, CardContent} from "@/components/ui/card";
import {Upload} from "lucide-react";

interface DocumentUploadProps {
    onFileChange: (file: File | null) => void;
    isLoading: boolean;
}

export function DocumentUpload({onFileChange, isLoading}: DocumentUploadProps) {
    const [fileName, setFileName] = useState<string>('');
    const [isDragging, setIsDragging] = useState<boolean>(false);

    const handleFileChange = useCallback((file: File | null) => {
        if (file) {
            setFileName(file.name);
            onFileChange(file);
        } else {
            setFileName('');
            onFileChange(null);
        }
    }, [onFileChange]);

    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const file = e.target.files?.[0] || null;
        handleFileChange(file);
    };

    const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
        e.preventDefault();
        e.stopPropagation();
        setIsDragging(true);
    };

    const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {
        e.preventDefault();
        e.stopPropagation();
        setIsDragging(false);
    };

    const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
        e.preventDefault();
        e.stopPropagation();
        setIsDragging(false);

        if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
            const file = e.dataTransfer.files[0];
            if (file.type.match('image/png|image/jpeg|image/jpg|application/pdf')) {
                handleFileChange(file);
            }
        }
    };

    return (
        <Card className="w-full">
            <CardContent className="p-3">
                <div
                    className={`border-2 border-dashed rounded-md ${isDragging ? 'border-primary bg-primary/5' : 'border-muted-foreground/20'
                        } cursor-pointer flex flex-col items-center justify-center py-3 px-2 transition-colors`}
                    onDragOver={handleDragOver}
                    onDragLeave={handleDragLeave}
                    onDrop={handleDrop}
                    onClick={() => document.getElementById('file-upload')?.click()}
                >
                    <Upload className="h-5 w-5 text-muted-foreground mb-1" />
                    <p className="text-xs font-medium">Drop invoice or receipt here or click to browse</p>
                    {fileName ? (
                        <p className="text-xs text-primary mt-1">{fileName}</p>
                    ) : (
                        <p className="text-xs text-muted-foreground mt-1">Accepts PNG, JPG, JPEG or PDF</p>


                    )}
                    <input
                        id="file-upload"
                        type="file"
                        className="hidden"
                        accept="image/png,image/jpeg,image/jpg,application/pdf"

                        onChange={handleInputChange}
                        disabled={isLoading}
                    />
                </div>
            </CardContent>
        </Card>
    );
}

================
File: components/layout/footer.tsx
================
import Link from "next/link"

export function Footer() {
    return (
        <footer className="w-full border-t py-5 bg-background">
            <div className="container flex flex-col items-center justify-between gap-4 md:h-10 md:flex-row">
                <p className="text-center text-xs text-muted-foreground md:text-left">
                    Built with{" "}
                    <a
                        href="https://nextjs.org"
                        target="_blank"
                        rel="noreferrer"
                        className="font-medium underline underline-offset-4"
                    >
                        Next.js
                    </a>{" "}
                    and{" "}
                    <a
                        href="https://ui.shadcn.com"
                        target="_blank"
                        rel="noreferrer"
                        className="font-medium underline underline-offset-4"
                    >
                        shadcn/ui
                    </a>
                </p>
                <div className="flex items-center gap-4 text-xs text-muted-foreground">
                    <Link href="/privacy" className="underline underline-offset-4">
                        Privacy
                    </Link>
                    <Link href="/terms" className="underline underline-offset-4">
                        Terms
                    </Link>
                    <Link href="/contact" className="underline underline-offset-4">
                        Contact
                    </Link>
                </div>
            </div>
        </footer>
    )
}

================
File: components/layout/header.tsx
================
import Link from "next/link"
import {ThemeToggle} from "@/components/theme-toggle";




import {Button} from "@/components/ui/button"
import {Sparkles} from "lucide-react"

export function Header() {
    return (
        <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-backdrop-blur:bg-background/60">
            <div className="container h-14 flex items-center">
                <div className="mr-4 hidden md:flex">
                    <Link href="/" className="flex items-center space-x-2">
                        <Sparkles className="h-5 w-5" />
                        <span className="hidden font-bold sm:inline-block">OCR Schema Builder</span>
                    </Link>
                </div>
                <div className="mr-4 flex md:hidden">
                    <Link href="/" className="flex items-center">
                        <Sparkles className="h-5 w-5" />
                    </Link>
                </div>
                <div className="flex flex-1 items-center justify-end space-x-2">
                    <nav className="flex items-center space-x-2">
                        <Button variant="ghost" size="sm" asChild>
                            <Link href="/">Home</Link>
                        </Button>
                        <Button variant="ghost" size="sm" asChild>
                            <Link href="/docs">Documentation</Link>
                        </Button>
                        <ThemeToggle />
                    </nav>
                </div>
            </div>
        </header>
    )
}

================
File: components/results/results-display.tsx
================
import {
    Card,
    CardContent,
    CardHeader,
    CardTitle,
} from "@/components/ui/card";
import {Badge} from "@/components/ui/badge";
import {ProcessResponse} from "@/types";
import {ScrollArea} from "@/components/ui/scroll-area";
import {CheckCircle2, XCircle, Sparkles} from "lucide-react";

interface ResultsDisplayProps {
    results: ProcessResponse | null;
}

export function ResultsDisplay({results}: ResultsDisplayProps) {
    if (!results) return null;

    const extractedData = results.extracted_data;
    const fields = Object.entries(extractedData);


    type ExtractedValue = string | number | boolean | object | null | undefined;

    const getDataTypeBadge = (value: ExtractedValue): string => {
        if (value === null || value === undefined) return "null";
        if (typeof value === "number") return "number";
        if (typeof value === "boolean") return "boolean";
        if (typeof value === "string") return "string";
        if (Array.isArray(value)) return "array";
        if (typeof value === "object") return "object";
        return "unknown";
    };

    // Function to render the value based on its type
    const renderValue = (value: ExtractedValue): React.ReactNode => {
        // Handle null or undefined
        if (value === null || value === undefined) {
            return <span className="italic text-muted-foreground">null</span>;
        }

        // Handle numbers
        if (typeof value === "number") {
            return <span className="font-mono">{value.toFixed(2)}</span>;
        }

        // Handle booleans
        if (typeof value === "boolean") {
            return (
                <div className="flex items-center">
                    {value ?
                        <><CheckCircle2 className="h-4 w-4 text-green-500 mr-1" /> <span>true</span></> :
                        <><XCircle className="h-4 w-4 text-red-500 mr-1" /> <span>false</span></>
                    }
                </div>
            );
        }

        // Handle strings
        if (typeof value === "string") {
            return value;
        }

        // Handle arrays and objects
        if (Array.isArray(value) || (typeof value === "object")) {
            return (
                <div className="bg-muted rounded p-2 mt-2 overflow-auto max-h-36">
                    <pre className="text-xs">
                        {JSON.stringify(value, null, 2)}
                    </pre>
                </div>
            );
        }

        // Fallback for any other types
        return <span>{String(value)}</span>;
    };

    return (
        <Card className="w-full h-full flex flex-col">
            <CardHeader className="px-3 py-2 flex flex-row items-center justify-between border-b">
                <div className="flex items-center space-x-2">
                    <Sparkles className="h-4 w-4 text-primary" />
                    <CardTitle className="text-sm font-medium">Extracted Data</CardTitle>
                </div>
                <Badge variant="outline">
                    {fields.length} fields
                </Badge>
            </CardHeader>
            <CardContent className="p-0 flex-grow w-full">
                {fields.length > 0 ? (
                    <ScrollArea className="h-full w-full">
                        <div className="divide-y">
                            {fields.map(([key, value]) => (
                                <div key={key} className="p-3">
                                    <div className="flex justify-between items-center mb-1">
                                        <h3 className="text-sm font-medium">{key}</h3>
                                        <Badge variant="secondary" className="text-xs">
                                            {getDataTypeBadge(value)}
                                        </Badge>
                                    </div>
                                    <div className="text-sm text-muted-foreground">
                                        {renderValue(value)}
                                    </div>
                                </div>
                            ))}
                        </div>
                    </ScrollArea>
                ) : (
                    <div className="flex flex-col items-center justify-center h-full text-center p-6">
                        <p className="text-muted-foreground">No data extracted</p>
                    </div>
                )}
            </CardContent>
        </Card>
    );
}

================
File: components/schema/field-editor.tsx
================
import {useState} from 'react';
import {FieldType, SchemaField, FORMAT_OPTIONS} from '@/types';
import {Button} from '@/components/ui/button';
import {Input} from '@/components/ui/input';
import {Textarea} from '@/components/ui/textarea';
import {Switch} from '@/components/ui/switch';
import {Label} from '@/components/ui/label';
import {Select, SelectContent, SelectItem, SelectTrigger, SelectValue} from '@/components/ui/select';
import {Card, CardContent} from '@/components/ui/card';
import {
    Collapsible,
    CollapsibleContent,
} from '@/components/ui/collapsible';
import {Badge} from '@/components/ui/badge';
import {ChevronDown, ChevronUp, Plus, Trash, Edit} from 'lucide-react';
import {Separator} from '@/components/ui/separator';
import {
    ToggleGroup,
    ToggleGroupItem
} from '@/components/ui/toggle-group';

interface FieldEditorProps {
    field: SchemaField;
    onUpdate: (updatedField: SchemaField) => void;
    onCancel: () => void;
    isNew?: boolean;
}

export function FieldEditor({
    field,
    onUpdate,
    onCancel,
    isNew = false
}: FieldEditorProps) {
    const [fieldData, setFieldData] = useState<SchemaField>({...field});
    const [showProperties, setShowProperties] = useState(false);
    const [showItems, setShowItems] = useState(false);
    const [examples, setExamples] = useState<string[]>(field.examples || []);
    const [exampleInput, setExampleInput] = useState('');

    // Handle input changes
    const handleChange = (key: keyof SchemaField, value: any) => {
        setFieldData(prev => ({...prev, [key]: value}));
    };

    // Handle type change
    const handleTypeChange = (value: FieldType) => {
        const newData = {...fieldData, type: value};

        // Reset type-specific fields
        if (value !== 'object') {
            newData.properties = undefined;
        }

        if (value !== 'array') {
            newData.items = undefined;
        }

        if (value !== 'string') {
            newData.format = undefined;
        }

        // Initialize nested structures if needed
        if (value === 'object' && !newData.properties) {
            newData.properties = [];
        }

        if (value === 'array' && !newData.items) {
            newData.items = {
                name: 'item',
                type: 'object',
                required: true,
                properties: []
            };
        }

        setFieldData(newData);
    };

    // Add a property to an object field
    const addProperty = () => {
        if (fieldData.properties) {
            setFieldData({
                ...fieldData,
                properties: [
                    ...fieldData.properties,
                    {name: '', type: 'string', required: true}
                ]
            });
        }
    };

    // Remove a property from an object field
    const removeProperty = (index: number) => {
        if (fieldData.properties) {
            setFieldData({
                ...fieldData,
                properties: fieldData.properties.filter((_, i) => i !== index)
            });
        }
    };

    // Update a property in an object field
    const updateProperty = (index: number, updatedProperty: SchemaField) => {
        if (fieldData.properties) {
            const updatedProperties = [...fieldData.properties];
            updatedProperties[index] = updatedProperty;
            setFieldData({
                ...fieldData,
                properties: updatedProperties
            });
        }
    };

    // Add an example
    const addExample = () => {
        if (exampleInput.trim()) {
            const newExamples = [...examples, exampleInput.trim()];
            setExamples(newExamples);
            handleChange('examples', newExamples);
            setExampleInput('');
        }
    };

    // Remove an example
    const removeExample = (index: number) => {
        const newExamples = examples.filter((_, i) => i !== index);
        setExamples(newExamples);
        handleChange('examples', newExamples);
    };

    // Handle form submission
    const handleSubmit = () => {
        onUpdate({
            ...fieldData,
            examples: examples,
        });
    };

    return (
        <div className="space-y-6">
            <div className="space-y-4">
                <div className="grid gap-2">
                    <Label htmlFor="field-name">Field Name</Label>
                    <Input
                        id="field-name"
                        placeholder="e.g. invoice_number"
                        value={fieldData.name}
                        onChange={(e) => handleChange('name', e.target.value)}
                    />
                </div>
                <div className="grid grid-cols-2 gap-8"> {/* Increased gap to 8 */}
                    <div className="space-y-4"> {/* Increased vertical spacing */}
                        <Label className="text-sm font-medium">Field Type</Label>
                        <ToggleGroup
                            type="single"
                            value={fieldData.type}
                            onValueChange={(value) => value && handleTypeChange(value as FieldType)}
                            className="grid grid-cols-3 gap-2 w-full" // Changed to grid layout
                        >
                            <ToggleGroupItem value="string" size="sm" className="py-2">string</ToggleGroupItem>
                            <ToggleGroupItem value="number" size="sm" className="py-2">number</ToggleGroupItem>
                            <ToggleGroupItem value="boolean" size="sm" className="py-2">boolean</ToggleGroupItem>
                            <ToggleGroupItem value="array" size="sm" className="py-2">array</ToggleGroupItem>
                            <ToggleGroupItem value="object" size="sm" className="py-2">object</ToggleGroupItem>
                        </ToggleGroup>
                    </div>

                    <div className="flex flex-col justify-end space-y-2 h-full"> {/* More vertical layout */}
                        <div className="flex items-center space-x-3">
                            <Switch
                                id="required-field"
                                checked={fieldData.required}
                                onCheckedChange={(checked) => handleChange('required', checked)}
                            />
                            <Label
                                htmlFor="required-field"
                                className="text-sm cursor-pointer select-none"
                            >
                                Required field
                            </Label>
                        </div>
                    </div>
                </div>

                <div className="space-y-2">
                    <Label htmlFor="field-description">Description</Label>
                    <Textarea
                        id="field-description"
                        placeholder="Describe what should be extracted (e.g., 'The invoice number, typically found at the top right')"
                        value={fieldData.description || ''}
                        onChange={(e) => handleChange('description', e.target.value)}
                        rows={3}
                    />
                </div>

                {fieldData.type === 'string' && (
                    <div className="space-y-2">
                        <Label htmlFor="field-format">Format (Optional)</Label>
                        <Select
                            value={fieldData.format || 'none'}
                            onValueChange={(value) => handleChange('format', value === 'none' ? '' : value)}
                        >
                            <SelectTrigger id="field-format">
                                <SelectValue placeholder="Select a format hint for extraction" />
                            </SelectTrigger>
                            <SelectContent>
                                {FORMAT_OPTIONS.map((option) => (
                                    <SelectItem key={option.value} value={option.value}>
                                        {option.label}
                                    </SelectItem>
                                ))}
                            </SelectContent>
                        </Select>
                    </div>
                )}

                <div className="space-y-2">
                    <Label>Example Values (Optional)</Label>
                    <div className="flex gap-2">
                        <Input
                            placeholder="Add an example value"
                            value={exampleInput}
                            onChange={(e) => setExampleInput(e.target.value)}
                        />
                        <Button type="button" onClick={addExample} size="sm">
                            Add
                        </Button>
                    </div>
                    {examples.length > 0 && (
                        <div className="flex flex-wrap gap-2 mt-2">
                            {examples.map((example, index) => (
                                <Badge key={index} variant="secondary" className="flex items-center gap-1">
                                    {example}
                                    <Button
                                        variant="ghost"
                                        size="icon"
                                        className="h-4 w-4 p-0 ml-1 text-muted-foreground hover:text-foreground"
                                        onClick={() => removeExample(index)}
                                    >
                                        <Trash size={12} />
                                    </Button>
                                </Badge>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {fieldData.type === 'object' && (
                <>
                    <Separator />
                    <div className="space-y-2">
                        <div className="flex items-center justify-between">
                            <Label>Object Properties</Label>
                            <Button
                                variant="outline"
                                size="sm"
                                onClick={() => setShowProperties(!showProperties)}
                            >
                                {showProperties ? (
                                    <>
                                        <ChevronUp className="mr-1 h-4 w-4" />
                                        Hide Properties
                                    </>
                                ) : (
                                    <>
                                        <ChevronDown className="mr-1 h-4 w-4" />
                                        Show Properties
                                    </>
                                )}
                            </Button>
                        </div>

                        <Collapsible open={showProperties} onOpenChange={setShowProperties}>
                            <CollapsibleContent className="space-y-2">
                                {fieldData.properties && fieldData.properties.length > 0 ? (
                                    <div className="space-y-2">
                                        {fieldData.properties.map((prop, idx) => (
                                            <Card key={idx} className="overflow-hidden">
                                                <CardContent className="p-3">
                                                    <div className="flex items-center justify-between">
                                                        <div className="flex items-center gap-2">
                                                            <span className="font-medium text-sm">
                                                                {prop.name || <span className="text-muted-foreground">Unnamed property</span>}
                                                            </span>
                                                            <Badge variant={prop.required ? "default" : "outline"}>
                                                                {prop.required ? 'Required' : 'Optional'}
                                                            </Badge>
                                                            <Badge variant="outline">
                                                                {prop.type}
                                                            </Badge>
                                                        </div>
                                                        <div className="flex items-center gap-1">
                                                            <Button
                                                                variant="ghost"
                                                                size="icon"
                                                                className="h-8 w-8 text-blue-500"
                                                                onClick={() => {
                                                                    const modalField = {...prop};
                                                                    // In a real app, we would open a modal or create a recursive editor
                                                                    // For simplicity, we'll use a basic prompt
                                                                    const name = prompt('Property name:', prop.name);
                                                                    if (name !== null) {
                                                                        modalField.name = name;
                                                                        updateProperty(idx, modalField);
                                                                    }
                                                                }}
                                                            >
                                                                <Edit size={16} />
                                                            </Button>
                                                            <Button
                                                                variant="ghost"
                                                                size="icon"
                                                                className="h-8 w-8 text-red-500"
                                                                onClick={() => removeProperty(idx)}
                                                            >
                                                                <Trash size={16} />
                                                            </Button>
                                                        </div>
                                                    </div>
                                                </CardContent>
                                            </Card>
                                        ))}
                                    </div>
                                ) : (
                                    <div className="text-center py-4 text-muted-foreground">
                                        No properties defined
                                    </div>
                                )}
                                <Button
                                    variant="outline"
                                    size="sm"
                                    className="w-full"
                                    onClick={addProperty}
                                >
                                    <Plus className="mr-1 h-4 w-4" />
                                    Add Property
                                </Button>
                            </CollapsibleContent>
                        </Collapsible>
                    </div>
                </>
            )}

            {fieldData.type === 'array' && (
                <>
                    <Separator />
                    <div className="space-y-2">
                        <div className="flex items-center justify-between">
                            <Label>Array Items</Label>
                            <Button
                                variant="outline"
                                size="sm"
                                onClick={() => setShowItems(!showItems)}
                            >
                                {showItems ? (
                                    <>
                                        <ChevronUp className="mr-1 h-4 w-4" />
                                        Hide Item Schema
                                    </>
                                ) : (
                                    <>
                                        <ChevronDown className="mr-1 h-4 w-4" />
                                        Show Item Schema
                                    </>
                                )}
                            </Button>
                        </div>

                        <Collapsible open={showItems} onOpenChange={setShowItems}>
                            <CollapsibleContent className="space-y-2">
                                {fieldData.items ? (
                                    <Card className="overflow-hidden">
                                        <CardContent className="p-3">
                                            <div className="flex items-center justify-between">
                                                <div>
                                                    <span className="font-medium text-sm">
                                                        Item Type: {fieldData.items.type}
                                                    </span>
                                                    {fieldData.items.type === 'object' && fieldData.items.properties && (
                                                        <span className="text-xs text-muted-foreground ml-2">
                                                            {fieldData.items.properties.length} properties
                                                        </span>
                                                    )}
                                                </div>
                                                <Button
                                                    variant="ghost"
                                                    size="icon"
                                                    className="h-8 w-8 text-blue-500"
                                                    onClick={() => {
                                                        // In a real app, this would open a modal for editing the item schema
                                                        alert('In a complete implementation, this would open the item schema editor');
                                                    }}
                                                >
                                                    <Edit size={16} />
                                                </Button>
                                            </div>
                                        </CardContent>
                                    </Card>
                                ) : (
                                    <div className="text-center py-4 text-muted-foreground">
                                        No item schema defined
                                    </div>
                                )}
                            </CollapsibleContent>
                        </Collapsible>
                    </div>
                </>
            )}

            <div className="flex justify-end gap-2 pt-4">
                <Button variant="outline" onClick={onCancel}>
                    Cancel
                </Button>
                <Button
                    onClick={handleSubmit}
                    disabled={!fieldData.name.trim()}
                >
                    {isNew ? 'Add Field' : 'Update Field'}
                </Button>
            </div>
        </div>
    );
}

================
File: components/schema/schema-builder-header.tsx
================
import {CardHeader, CardTitle} from "@/components/ui/card";
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue
} from '@/components/ui/select';
import {
    Tooltip,
    TooltipContent,
    TooltipProvider,
    TooltipTrigger,
} from "@/components/ui/tooltip";
import {LayoutTemplate, Info} from "lucide-react";

interface SchemaBuilderHeaderProps {
    selectedTemplate: string;
    onTemplateChange: (value: string) => void;
}

export function SchemaBuilderHeader({selectedTemplate, onTemplateChange}: SchemaBuilderHeaderProps) {
    return (
        <CardHeader className="px-3 py-2 flex flex-row items-center justify-between border-b">
            <div className="flex flex-col">
                <div className="flex items-center space-x-2">
                    <LayoutTemplate className="h-4 w-4" />
                    <CardTitle className="text-sm font-medium">Schema Definition</CardTitle>

                    <TooltipProvider>
                        <Tooltip>
                            <TooltipTrigger asChild>
                                <Info className="h-3.5 w-3.5 text-muted-foreground cursor-help ml-1" />
                            </TooltipTrigger>
                            <TooltipContent>
                                <p className="text-xs">Define fields to extract from the document</p>
                            </TooltipContent>
                        </Tooltip>
                    </TooltipProvider>
                </div>
            </div>

            <Select
                value={selectedTemplate}
                onValueChange={onTemplateChange}
            >
                <SelectTrigger className="h-7 text-xs w-[130px]">
                    <SelectValue placeholder="Template" />
                </SelectTrigger>
                <SelectContent>
                    <SelectItem value="custom">Custom Schema</SelectItem>
                    <SelectItem value="invoice">Invoice Template</SelectItem>
                    <SelectItem value="receipt">Receipt Template</SelectItem>
                    <SelectItem value="business_card">Business Card</SelectItem>
                </SelectContent>
            </Select>
        </CardHeader>
    );
}

================
File: components/schema/schema-builder.tsx
================
import {useState} from 'react';
import {SchemaField, SCHEMA_TEMPLATES} from '@/types';
import {
    Card,
    CardContent,
    CardHeader,
    CardTitle,
    CardDescription
} from '@/components/ui/card';
import {Button} from '@/components/ui/button';
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue
} from '@/components/ui/select';
import {
    Dialog,
    DialogContent,
    DialogHeader,
    DialogTitle,
} from "@/components/ui/dialog";
import {
    Collapsible,
    CollapsibleContent,
} from '@/components/ui/collapsible';
import {FieldEditor} from '@/components/schema/field-editor';
import {SchemaFieldItem} from '@/components/schema/schema-field-item';
import {ScrollArea} from '@/components/ui/scroll-area';
import {Code} from 'lucide-react';

interface SchemaBuilderProps {
    schemaFields: SchemaField[];
    setSchemaFields: (fields: SchemaField[]) => void;
    onSubmit: () => void;
    isLoading: boolean;
    hasFile: boolean;
}

export function SchemaBuilder({
    schemaFields,
    setSchemaFields,
    onSubmit,
    isLoading,
    hasFile
}: SchemaBuilderProps) {
    const [isDialogOpen, setIsDialogOpen] = useState(false);
    const [editingField, setEditingField] = useState<SchemaField | null>(null);
    const [editingIndex, setEditingIndex] = useState<number | null>(null);
    const [isAddingField, setIsAddingField] = useState(false);
    const [selectedTemplate, setSelectedTemplate] = useState<string>('custom');
    const [showSchemaJson, setShowSchemaJson] = useState(false);

    // Apply a schema template
    const applyTemplate = (templateName: string) => {
        if (templateName === 'custom') {
            return; // Keep current schema
        }

        // Option to merge or replace
        const mergeStrategy = confirm('Do you want to merge this template with existing fields?');

        if (mergeStrategy) {
            // Merge template fields, avoiding duplicates
            const templateFields = SCHEMA_TEMPLATES[templateName as keyof typeof SCHEMA_TEMPLATES] || [];
            const newFields = [...schemaFields];

            templateFields.forEach(templateField => {
                const existingFieldIndex = newFields.findIndex(f => f.name === templateField.name);
                if (existingFieldIndex === -1) {
                    newFields.push(templateField);
                }
            });

            setSchemaFields(newFields);
        } else {
            setSchemaFields(SCHEMA_TEMPLATES[templateName as keyof typeof SCHEMA_TEMPLATES] || []);
        }
    };

    // Start adding a new field
    const startAddField = () => {
        setIsAddingField(true);
        setEditingField({
            name: '',
            type: 'string',
            required: true
        });
        setEditingIndex(null);
        setIsDialogOpen(true);
    };

    // Start editing a field
    const startEditField = (field: SchemaField, index: number) => {
        setIsAddingField(false);
        setEditingField({...field});
        setEditingIndex(index);
        setIsDialogOpen(true);
    };

    // Save a field (new or edited)
    const saveField = (field: SchemaField) => {
        if (isAddingField) {
            setSchemaFields([...schemaFields, field]);
        } else if (editingIndex !== null) {
            const newFields = [...schemaFields];
            newFields[editingIndex] = field;
            setSchemaFields(newFields);
        }
        setIsDialogOpen(false);
    };

    // Remove a field from the schema
    const removeSchemaField = (index: number) => {
        if (confirm('Are you sure you want to remove this field?')) {
            setSchemaFields(schemaFields.filter((_, i) => i !== index));
        }
    };

    // Convert schema fields to JSON schema
    const generateJsonSchema = (): Record<string, any> => {
        const properties: Record<string, any> = {};
        const required: string[] = [];

        // Process each field
        schemaFields.forEach(field => {
            // Add to required list if needed
            if (field.required) {
                required.push(field.name);
            }

            // Create the property schema
            const propSchema: Record<string, any> = {
                type: field.type
            };

            // Add description if present
            if (field.description) {
                propSchema.description = field.description;
            }

            // Add format if present (for string fields)
            if (field.type === 'string' && field.format) {
                propSchema.format = field.format;
            }

            // Add examples if present
            if (field.examples && field.examples.length > 0) {
                propSchema.examples = field.examples;
            }

            // Handle object type
            if (field.type === 'object' && field.properties && field.properties.length > 0) {
                propSchema.properties = {};
                const objRequired: string[] = [];

                field.properties.forEach(prop => {
                    propSchema.properties[prop.name] = {type: prop.type};

                    if (prop.required) {
                        objRequired.push(prop.name);
                    }

                    if (prop.description) {
                        propSchema.properties[prop.name].description = prop.description;
                    }
                });

                if (objRequired.length > 0) {
                    propSchema.required = objRequired;
                }

                propSchema.additionalProperties = false;
            }

            // Handle array type
            if (field.type === 'array' && field.items) {
                propSchema.items = {
                    type: field.items.type
                };

                if (field.items.description) {
                    propSchema.items.description = field.items.description;
                }

                // Handle object items
                if (field.items.type === 'object' && field.items.properties && field.items.properties.length > 0) {
                    propSchema.items.properties = {};
                    const itemsRequired: string[] = [];

                    field.items.properties.forEach(prop => {
                        propSchema.items.properties[prop.name] = {type: prop.type};

                        if (prop.required) {
                            itemsRequired.push(prop.name);
                        }

                        if (prop.description) {
                            propSchema.items.properties[prop.name].description = prop.description;
                        }
                    });

                    if (itemsRequired.length > 0) {
                        propSchema.items.required = itemsRequired;
                    }

                    propSchema.items.additionalProperties = false;
                }
            }

            // Add the property to the schema
            properties[field.name] = propSchema;
        });

        // Build the complete schema
        return {
            type: "object",
            properties: properties,
            required: required,
            additionalProperties: false
        };
    };

    return (
        <>
            <Card className="w-full flex-grow"> {/* Added w-full and flex-grow */}
                <CardHeader>
                    <div className="flex items-center justify-between">
                        <div>
                            <CardTitle>Schema Definition</CardTitle>
                            <CardDescription>Define the data fields to extract from the document</CardDescription>
                        </div>
                        <Select
                            value={selectedTemplate}
                            onValueChange={(value) => {
                                setSelectedTemplate(value);
                                applyTemplate(value);
                            }}
                        >
                            <SelectTrigger className="w-[180px]">
                                <SelectValue placeholder="Select template" />
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="custom">Custom Schema</SelectItem>
                                <SelectItem value="invoice">Invoice Template</SelectItem>
                                <SelectItem value="receipt">Receipt Template</SelectItem>
                                <SelectItem value="business_card">Business Card Template</SelectItem>
                            </SelectContent>
                        </Select>
                    </div>
                </CardHeader>

                <CardContent className="space-y-4 w-full"> {/* Added w-full */}
                    <div className="space-y-2">
                        {schemaFields.length > 0 ? (
                            schemaFields.map((field, index) => (
                                <SchemaFieldItem
                                    key={index}
                                    field={field}
                                    onEdit={() => startEditField(field, index)}
                                    onRemove={() => removeSchemaField(index)}
                                />
                            ))
                        ) : (
                            <div className="text-center py-8 text-muted-foreground">
                                No fields defined. Add fields or select a template.
                            </div>
                        )}
                    </div>

                    <Button
                        variant="outline"
                        className="w-full"
                        onClick={startAddField}
                    >
                        Add Field
                    </Button>

                    <div className="flex items-center justify-between">
                        <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => setShowSchemaJson(!showSchemaJson)}
                            className="flex items-center gap-1"
                        >
                            <Code size={16} />
                            {showSchemaJson ? 'Hide Schema JSON' : 'Show Schema JSON'}
                        </Button>
                    </div>

                    <Collapsible open={showSchemaJson} onOpenChange={setShowSchemaJson}>
                        <CollapsibleContent>
                            <ScrollArea className="h-[200px] w-full rounded-md border p-4">
                                <pre className="text-xs font-mono">
                                    {JSON.stringify(generateJsonSchema(), null, 2)}
                                </pre>
                            </ScrollArea>
                        </CollapsibleContent>
                    </Collapsible>

                    <Button
                        className="w-full"
                        onClick={onSubmit}
                        disabled={!hasFile || isLoading || schemaFields.length === 0}
                    >
                        {isLoading ? 'Processing...' : 'Process Document'}
                    </Button>
                </CardContent>
            </Card>

            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
                <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
                    <DialogHeader>
                        <DialogTitle>{isAddingField ? 'Add New Field' : 'Edit Field'}</DialogTitle>
                    </DialogHeader>
                    {editingField && (
                        <FieldEditor
                            field={editingField}
                            onUpdate={saveField}
                            onCancel={() => setIsDialogOpen(false)}
                            isNew={isAddingField}
                        />
                    )}
                </DialogContent>
            </Dialog>
        </>
    );
}

================
File: components/schema/schema-field-item.tsx
================
import {useState} from 'react';
import {SchemaField} from '@/types';
import {Button} from '@/components/ui/button';
import {Card, CardContent} from '@/components/ui/card';
import {Badge} from '@/components/ui/badge';
import {Collapsible, CollapsibleContent} from '@/components/ui/collapsible';
import {Edit, Trash, ChevronDown, ChevronUp} from 'lucide-react';

interface SchemaFieldItemProps {
    field: SchemaField;
    onEdit: () => void;
    onRemove: () => void;
}

export function SchemaFieldItem({field, onEdit, onRemove}: SchemaFieldItemProps) {
    const [showDetails, setShowDetails] = useState(false);

    return (
        <Card className="overflow-hidden">
            <CardContent className="p-4">
                <div className="flex">
                    {/* Left side: Field Name */}
                    <div className="flex-grow">
                        <p className="font-medium text-base mb-2">{field.name}</p>

                        {/* Field Type and Modifiers */}
                        <div className="flex items-center space-x-2">
                            <Badge variant="outline" className="text-xs">{field.type}</Badge>
                            <Badge variant={field.required ? "default" : "outline"} className="text-xs">
                                {field.required ? 'Required' : 'Optional'}
                            </Badge>
                        </div>
                    </div>

                    {/* Right side: Action Buttons */}
                    <div className="flex items-start space-x-1">
                        <Button
                            variant="ghost"
                            size="icon"
                            className="h-8 w-8"
                            onClick={() => setShowDetails(!showDetails)}
                        >
                            {showDetails ? <ChevronUp size={16} /> : <ChevronDown size={16} />}
                        </Button>

                        <Button
                            variant="ghost"
                            size="icon"
                            className="h-8 w-8 text-blue-500"
                            onClick={onEdit}
                        >
                            <Edit size={16} />
                        </Button>

                        <Button
                            variant="ghost"
                            size="icon"
                            className="h-8 w-8 text-red-500"
                            onClick={onRemove}
                        >
                            <Trash size={16} />
                        </Button>
                    </div>
                </div>

                <Collapsible open={showDetails} onOpenChange={setShowDetails}>
                    <CollapsibleContent className="mt-2 space-y-2 text-sm">
                        {field.description && (
                            <div className="text-muted-foreground">
                                <span className="font-medium">Description:</span> {field.description}
                            </div>
                        )}

                        {field.format && (
                            <div className="text-muted-foreground">
                                <span className="font-medium">Format:</span> {field.format}
                            </div>
                        )}

                        {field.examples && field.examples.length > 0 && (
                            <div className="text-muted-foreground">
                                <span className="font-medium">Examples:</span> {field.examples.join(', ')}
                            </div>
                        )}

                        {field.type === 'object' && field.properties && (
                            <div>
                                <span className="font-medium">Properties:</span>
                                <ul className="list-disc list-inside mt-1 pl-2">
                                    {field.properties.map((prop, idx) => (
                                        <li key={idx} className="text-muted-foreground">
                                            {prop.name} <span className="opacity-70">({prop.type})</span>
                                        </li>
                                    ))}
                                </ul>
                            </div>
                        )}

                        {field.type === 'array' && field.items && (
                            <div>
                                <span className="font-medium">Array items:</span>
                                <div className="text-muted-foreground">
                                    Type: {field.items.type}
                                    {field.items.type === 'object' && field.items.properties && (
                                        <> with {field.items.properties.length} properties</>
                                    )}
                                </div>
                            </div>
                        )}
                    </CollapsibleContent>
                </Collapsible>
            </CardContent>
        </Card>
    );
}

================
File: components/theme-provider.tsx
================
"use client"

import * as React from "react"
import {ThemeProvider as NextThemesProvider} from "next-themes"
import {ThemeProviderProps} from "next-themes"

export function ThemeProvider({children, ...props}: ThemeProviderProps) {
    return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}

================
File: components/theme-toggle.tsx
================
"use client"

import * as React from "react"
import {useTheme} from "next-themes"
import {Button} from "@/components/ui/button"
import {Moon, Sun} from "lucide-react"

export function ThemeToggle() {
    const {setTheme, theme} = useTheme()

    return (
        <Button
            variant="ghost"
            size="icon"
            onClick={() => setTheme(theme === "light" ? "dark" : "light")}
        >
            <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
            <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
            <span className="sr-only">Toggle theme</span>
        </Button>
    )
}

================
File: components/ui/badge.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge, badgeVariants }

================
File: components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40",
        outline:
          "border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }

================
File: components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn("flex flex-col gap-1.5 px-6", className)}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6", className)}
      {...props}
    />
  )
}

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: components/ui/collapsible.tsx
================
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

function Collapsible({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.Root>) {
  return <CollapsiblePrimitive.Root data-slot="collapsible" {...props} />
}

function CollapsibleTrigger({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>) {
  return (
    <CollapsiblePrimitive.CollapsibleTrigger
      data-slot="collapsible-trigger"
      {...props}
    />
  )
}

function CollapsibleContent({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>) {
  return (
    <CollapsiblePrimitive.CollapsibleContent
      data-slot="collapsible-content"
      {...props}
    />
  )
}

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

================
File: components/ui/dialog.tsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content>) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        <DialogPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4">
          <XIcon />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}

================
File: components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "border-input file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }

================
File: components/ui/label.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }

================
File: components/ui/scroll-area.tsx
================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

function ScrollArea({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {
  return (
    <ScrollAreaPrimitive.Root
      data-slot="scroll-area"
      className={cn("relative", className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport
        data-slot="scroll-area-viewport"
        className="ring-ring/10 dark:ring-ring/20 dark:outline-ring/40 outline-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] focus-visible:ring-4 focus-visible:outline-1"
      >
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  )
}

function ScrollBar({
  className,
  orientation = "vertical",
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      data-slot="scroll-area-scrollbar"
      orientation={orientation}
      className={cn(
        "flex touch-none p-px transition-colors select-none",
        orientation === "vertical" &&
          "h-full w-2.5 border-l border-l-transparent",
        orientation === "horizontal" &&
          "h-2.5 flex-col border-t border-t-transparent",
        className
      )}
      {...props}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb
        data-slot="scroll-area-thumb"
        className="bg-border relative flex-1 rounded-full"
      />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  )
}

export { ScrollArea, ScrollBar }

================
File: components/ui/select.tsx
================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger>) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive flex h-9 w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("px-2 py-1.5 text-sm font-medium", className)}
      {...props}
    />
  )
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}

================
File: components/ui/separator.tsx
================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator-root"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}

export { Separator }

================
File: components/ui/sonner.tsx
================
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner, ToasterProps } from "sonner"

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground font-medium",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground font-medium",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }

================
File: components/ui/switch.tsx
================
"use client"

import * as React from "react"
import * as SwitchPrimitive from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

function Switch({
  className,
  ...props
}: React.ComponentProps<typeof SwitchPrimitive.Root>) {
  return (
    <SwitchPrimitive.Root
      data-slot="switch"
      className={cn(
        "peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 inline-flex h-5 w-9 shrink-0 items-center rounded-full border-2 border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <SwitchPrimitive.Thumb
        data-slot="switch-thumb"
        className={cn(
          "bg-background pointer-events-none block size-4 rounded-full ring-0 shadow-lg transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0"
        )}
      />
    </SwitchPrimitive.Root>
  )
}

export { Switch }

================
File: components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      {...props}
    />
  )
}

export { Textarea }

================
File: components/ui/toggle-group.tsx
================
"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

function ToggleGroup({
  className,
  variant,
  size,
  children,
  ...props
}: React.ComponentProps<typeof ToggleGroupPrimitive.Root> &
  VariantProps<typeof toggleVariants>) {
  return (
    <ToggleGroupPrimitive.Root
      data-slot="toggle-group"
      data-variant={variant}
      data-size={size}
      className={cn(
        "group/toggle-group flex w-fit items-center rounded-md data-[variant=outline]:shadow-xs",
        className
      )}
      {...props}
    >
      <ToggleGroupContext.Provider value={{ variant, size }}>
        {children}
      </ToggleGroupContext.Provider>
    </ToggleGroupPrimitive.Root>
  )
}

function ToggleGroupItem({
  className,
  children,
  variant,
  size,
  ...props
}: React.ComponentProps<typeof ToggleGroupPrimitive.Item> &
  VariantProps<typeof toggleVariants>) {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      data-slot="toggle-group-item"
      data-variant={context.variant || variant}
      data-size={context.size || size}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        "min-w-0 flex-1 shrink-0 rounded-none shadow-none first:rounded-l-md last:rounded-r-md focus:z-10 focus-visible:z-10 data-[variant=outline]:border-l-0 data-[variant=outline]:first:border-l",
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
}

export { ToggleGroup, ToggleGroupItem }

================
File: components/ui/toggle.tsx
================
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium hover:bg-muted hover:text-muted-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] outline-none transition-[color,box-shadow] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive whitespace-nowrap",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent shadow-xs hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-9 px-2 min-w-9",
        sm: "h-8 px-1.5 min-w-8",
        lg: "h-10 px-2.5 min-w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Toggle({
  className,
  variant,
  size,
  ...props
}: React.ComponentProps<typeof TogglePrimitive.Root> &
  VariantProps<typeof toggleVariants>) {
  return (
    <TogglePrimitive.Root
      data-slot="toggle"
      className={cn(toggleVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Toggle, toggleVariants }

================
File: components/ui/tooltip.tsx
================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

function TooltipProvider({
  delayDuration = 0,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  )
}

function Tooltip({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  )
}

function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />
}

function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit rounded-md px-3 py-1.5 text-xs text-balance",
          className
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  )
}

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: hooks/use-hover.ts
================
import { useState, useRef, useEffect } from 'react';

export function useHover() {
  const [hovered, setHovered] = useState(false);
  const ref = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const element = ref.current;
    if (!element) return;

    const handleMouseEnter = () => setHovered(true);
    const handleMouseLeave = () => setHovered(false);

    element.addEventListener('mouseenter', handleMouseEnter);
    element.addEventListener('mouseleave', handleMouseLeave);

    return () => {
      element.removeEventListener('mouseenter', handleMouseEnter);
      element.removeEventListener('mouseleave', handleMouseLeave);
    };
  }, []);

  return { ref, hovered };
}

================
File: lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  productionBrowserSourceMaps: true,

};

export default nextConfig;

================
File: package.json
================
{
  "name": "extractor",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@radix-ui/react-collapsible": "^1.1.3",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-scroll-area": "^1.2.3",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-toggle": "^1.1.2",
    "@radix-ui/react-toggle-group": "^1.1.2",
    "@radix-ui/react-tooltip": "^1.1.8",
    "canvas-confetti": "^1.9.3",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.477.0",
    "next": "15.2.2-canary.1",
    "next-themes": "^0.4.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "sonner": "^2.0.1",
    "tailwind-merge": "^3.0.2",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/canvas-confetti": "^1.9.0",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.2.2-canary.1",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: styles/layout-utils.css
================
/* Layout utility classes following shadcn/ui's patterns */
.container-wrapper {
  width: 100%;
}

.container {
  width: 100%;
  max-width: 95rem; /* Increased from 90rem for more space */
  margin-left: auto;
  margin-right: auto;
  padding-left: 2rem; /* Increased padding */
  padding-right: 2rem;
}

.content-section {
  display: flex;
  flex-direction: column;
  height: 100%;
  overflow: hidden;
}

.content-height {
  max-height: calc(100vh - 14rem); /* Adjusted height */
  overflow-y: auto;
}

/* Improved grid spacing */
.content-section > div {
  gap: 1.75rem; /* More explicit grid gap */
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

================
File: types/index.ts
================
export type FieldType = 'string' | 'number' | 'boolean' | 'array' | 'object';


export interface SchemaField {
  name: string;
  type: FieldType;
  description?: string;
  examples?: string[];
  required: boolean;
  format?: string; // For string fields
  properties?: SchemaField[]; // For object fields
  items?: SchemaField; // For array fields
}

// Define the OCR results structure
export interface TextLine {
  text: string;
  confidence: number;
  bbox: [number, number, number, number];
  polygon: [number, number][];
}

export interface OCRResults {
  text_lines: TextLine[];
  full_text: string;
}

export interface ExtractedData {
  [key: string]: string | number | boolean | any[] | object | null;
}

export interface ProcessResponse {
  ocr_results: OCRResults;
  extracted_data: ExtractedData;
}

export const FORMAT_OPTIONS = [
  { value: 'none', label: 'None' },
  { value: 'email', label: 'Email' },
  { value: 'date', label: 'Date' },
  { value: 'phone', label: 'Phone Number' },
  { value: 'currency', label: 'Currency' },
  { value: 'address', label: 'Address' }
];

// Templates for common document types
export const SCHEMA_TEMPLATES: Record<string, SchemaField[]> = {
  'invoice': [
    { name: 'invoice_number', type: 'string' as FieldType, description: 'The unique identifier of the invoice, usually located at the top and prefixed with "Invoice #" or "INV-"', required: true },
    { name: 'date', type: 'string' as FieldType, description: 'The invoice date, often in MM/DD/YYYY format near the top', format: 'date', required: true },
    { name: 'due_date', type: 'string' as FieldType, description: 'The date payment is due', format: 'date', required: false },
    { name: 'vendor_name', type: 'string' as FieldType, description: 'The name of the company or person who issued the invoice', required: true },
    { name: 'total_amount', type: 'number' as FieldType, description: 'The total payment amount including taxes and fees', required: true },
    { name: 'subtotal', type: 'number' as FieldType, description: 'The amount before taxes and additional fees', required: false },
    { name: 'tax_amount', type: 'number' as FieldType, description: 'The tax amount, often labeled as Tax, GST, VAT, etc.', required: false },
    { name: 'line_items', type: 'array' as FieldType, description: 'List of products or services in the invoice', required: false,
      items: {
        name: 'item',
        type: 'object' as FieldType,
        required: true,
        properties: [
          { name: 'description', type: 'string' as FieldType, description: 'Description of the product or service', required: true },
          { name: 'quantity', type: 'number' as FieldType, description: 'Number of items', required: true },
          { name: 'unit_price', type: 'number' as FieldType, description: 'Price per unit', required: true },
          { name: 'amount', type: 'number' as FieldType, description: 'Total cost (quantity × unit price)', required: true }
        ]
      }
    }
  ],
  'receipt': [
    { name: 'merchant_name', type: 'string' as FieldType, description: 'The name of the business', required: true },
    { name: 'date', type: 'string' as FieldType, description: 'The date of purchase', format: 'date', required: true },
    { name: 'time', type: 'string' as FieldType, description: 'The time of purchase', required: false },
    { name: 'total', type: 'number' as FieldType, description: 'The total amount paid', required: true },
    { name: 'payment_method', type: 'string' as FieldType, description: 'How the purchase was paid for (credit, cash, etc.)', required: false },
    { name: 'items', type: 'array' as FieldType, description: 'Items purchased', required: false,
      items: {
        name: 'item',
        type: 'object' as FieldType,
        required: true,
        properties: [
          { name: 'name', type: 'string' as FieldType, description: 'Name of the item', required: true },
          { name: 'price', type: 'number' as FieldType, description: 'Price of the item', required: true },
          { name: 'quantity', type: 'number' as FieldType, description: 'Quantity purchased', required: false }
        ]
      }
    }
  ],
  'business_card': [
    { name: 'full_name', type: 'string' as FieldType, description: 'The person\'s full name', required: true },
    { name: 'title', type: 'string' as FieldType, description: 'The person\'s job title', required: false },
    { name: 'company', type: 'string' as FieldType, description: 'Company or organization name', required: false },
    { name: 'email', type: 'string' as FieldType, description: 'Email address', format: 'email', required: false },
    { name: 'phone', type: 'string' as FieldType, description: 'Phone number', format: 'phone', required: false },
    { name: 'address', type: 'string' as FieldType, description: 'Physical address', format: 'address', required: false },
    { name: 'website', type: 'string' as FieldType, description: 'Website URL', required: false }
  ],
  'custom': []
};
